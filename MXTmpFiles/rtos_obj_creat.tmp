#n
#t/* USER CODE BEGIN RTOS_MUTEX */
#t/* add mutexes, ... */
#t/* USER CODE END RTOS_MUTEX */
#n
#t/* USER CODE BEGIN RTOS_SEMAPHORES */
#t/* add semaphores, ... */
#t/* USER CODE END RTOS_SEMAPHORES */
#n
#t/* USER CODE BEGIN RTOS_TIMERS */
#t/* start timers, add new ones, ... */
#t/* USER CODE END RTOS_TIMERS */
#n
#t/* USER CODE BEGIN RTOS_QUEUES */
#t/* add queues, ... */
#t/* USER CODE END RTOS_QUEUES */
#n#t/* Create the thread(s) */
#t/* creation of CAN1_Send */
#tCAN1_SendHandle = osThreadNew(CAN1_Send_Task, NULL, &CAN1_Send_attributes);
#n
#t/* creation of chassic */
#tchassicHandle = osThreadNew(Chassis_Task, NULL, &chassic_attributes);
#n
#t/* creation of CAN2_Send */
#tCAN2_SendHandle = osThreadNew(CAN2_Send_Task, NULL, &CAN2_Send_attributes);
#n
#t/* creation of user_debug */
#tuser_debugHandle = osThreadNew(User_Debug_Task, NULL, &user_debug_attributes);
#n
#t/* creation of Air_Joy */
#tAir_JoyHandle = osThreadNew(Air_Joy_Task, NULL, &Air_Joy_attributes);
#n
#t/* creation of LaserPositioning */
#tLaserPositioningHandle = osThreadNew(LaserPositioning_Task, NULL, &LaserPositioning_attributes);
#n
#n
#t/* USER CODE BEGIN RTOS_THREADS */
#t/* add threads, ... */
#t/* USER CODE END RTOS_THREADS */
#n
#n
#t/* USER CODE BEGIN RTOS_EVENTS */
#t/* add events, ... */
#t/* USER CODE END RTOS_EVENTS */
#n
